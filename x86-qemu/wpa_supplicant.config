# wpa_supplicant build time configuration
#

# No openssl 
#CFLAGS += -I/usr/local/openssl/include
#LIBS += -L/usr/local/openssl/lib

# No kerberos
#CFLAGS += -I/usr/include/kerberos

# Don't use old WEXT
#CONFIG_DRIVER_WEXT=y

# Driver interface for Linux drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y

# no vendor extensions
#CONFIG_DRIVER_NL80211_QCA=y

# Depends on libnl which will be in the same build directory
#
CFLAGS += -I${CLFS_BUILD_DIR}/libnl-install/include/libnl3
LIBS += -L${CLFS_BUILD_DIR}/libnl-install/lib

# Use libnl v3
#CONFIG_LIBNL20=y
CONFIG_LIBNL32=y

# Used on Linux, not FreeBSD or Windows
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib
#LIBS_p += -L/usr/local/lib
#LIBS_c += -L/usr/local/lib
#CONFIG_DRIVER_NDIS=y
#CFLAGS += -I/usr/include/w32api/ddk
#LIBS += -L/usr/local/lib
# For native build using mingw
#CONFIG_NATIVE_WINDOWS=y
# Additional directories for cross-compilation on Linux host for mingw target
#CFLAGS += -I/opt/mingw/mingw32/include/ddk
#LIBS += -L/opt/mingw/mingw32/lib
#CC=mingw32-gcc
# CONFIG_USE_NDISUIO=y
#LIBS += -lexecinfo
#LIBS_p += -lexecinfo
#LIBS_c += -lexecinfo
#LIBS += -lbfd -liberty -lz
#LIBS_p += -lbfd -liberty -lz
#LIBS_c += -lbfd -liberty -lz


# No wired support
#CONFIG_DRIVER_WIRED=y

# No special driver support
#CONFIG_DRIVER_MACSEC_QCA=y
#CONFIG_DRIVER_MACSEC_LINUX=y
#CONFIG_DRIVER_ROBOSWITCH=y

# Driver interface for no driver (e.g., WPS ER only)
#CONFIG_DRIVER_NONE=y

# No Solaris libraries
#LIBS += -lsocket -ldlpi -lnsl
#LIBS_c += -lsocket

# Enable IEEE 802.1X Supplicant (automatically included if any EAP method or
# MACsec is included)
CONFIG_IEEE8021X_EAPOL=y

# No EAP methods
#CONFIG_EAP_MD5=y
#CONFIG_EAP_MSCHAPV2=y
#CONFIG_EAP_TLS=y
#CONFIG_EAP_PEAP=y
#CONFIG_EAP_TTLS=y
#CONFIG_EAP_FAST=y
#CONFIG_EAP_TEAP=y
CONFIG_EAP_GTC=y
CONFIG_EAP_OTP=y
#CONFIG_EAP_SIM=y
#CONFIG_SIM_SIMULATOR=y
#CONFIG_EAP_PSK=y
#CONFIG_EAP_PWD=y
#CONFIG_EAP_PAX=y
#CONFIG_EAP_LEAP=y
#CONFIG_EAP_AKA=y
#CONFIG_EAP_AKA_PRIME=y
#CONFIG_USIM_SIMULATOR=y
CONFIG_EAP_SAKE=y
CONFIG_EAP_GPSK=y
#CONFIG_EAP_GPSK_SHA256=y
#CONFIG_EAP_TNC=y

# No WPS or NFC
#CONFIG_WPS=y
#CONFIG_WPS_ER=y
#CONFIG_WPS_REG_DISABLE_OPEN=y
#CONFIG_WPS_NFC=y

#No IPsec
#CONFIG_EAP_IKEV2=y
#CONFIG_EAP_EKE=y

# No MACsec
#CONFIG_MACSEC=y

# No certificate support
#CONFIG_PKCS12=y

# No Smartcard support
#CONFIG_SMARTCARD=y

#CONFIG_PCSC=y

# No high throughput support
#CONFIG_HT_OVERRIDES=y
#CONFIG_VHT_OVERRIDES=y

# No Development testing support
#CONFIG_EAPOL_TEST=y

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# udp6 = UDP IPv6 sockets using localhost (::1)
# named_pipe = Windows Named Pipe (default for Windows)
# udp-remote = UDP sockets with remote access (only for tests systems/purpose)
# udp6-remote = UDP IPv6 sockets with remote access (only for tests purpose)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# InMo GNU Readline or History Libraries in wpa_cli.
#CONFIG_READLINE=y

# Include internal line edit mode in wpa_cli.
CONFIG_WPA_CLI_EDIT=y

# Include debugging code
CONFIG_NO_STDOUT_DEBUG=y

# Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
# 35-50 kB in code size.
#CONFIG_NO_WPA=y

# Include WPA passphrase support
#CONFIG_NO_WPA_PASSPHRASE=y

# No Simultaneous Authentication of Equals (SAE), WPA3-Personal
#CONFIG_SAE=y

# Disable scan result processing (ap_mode=1) to save code size by about 1 kB.
# This can be used if ap_scan=1 mode is never enabled.
#CONFIG_NO_SCAN_PROCESSING=y

# Select configuration backend:
# file = text file (e.g., wpa_supplicant.conf; note: the configuration file
#	path is given on command line, not here; this option is just used to
#	select the backend that allows configuration files to be used)
# winreg = Windows registry (see win_example.reg for an example)
CONFIG_BACKEND=file

# Remove configuration write functionality (i.e., to allow the configuration
# file to be updated based on runtime configuration changes). The runtime
# configuration can still be changed, the changes are just not going to be
# persistent over restarts. This option can be used to reduce code size by
# about 3.5 kB.
#CONFIG_NO_CONFIG_WRITE=y

# Remove support for configuration blobs to reduce code size by about 1.5 kB.
#CONFIG_NO_CONFIG_BLOBS=y

# Select program entry point implementation:
# main = UNIX/POSIX like main() function (default)
# main_winsvc = Windows service (read parameters from registry)
# main_none = Very basic example (development use only)
#CONFIG_MAIN=main

# Select wrapper for operating system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
#CONFIG_ELOOP=eloop

# Should we use poll instead of select? Select is used by default.
#CONFIG_ELOOP_POLL=y

# Should we use epoll instead of select? Select is used by default.
#CONFIG_ELOOP_EPOLL=y

# Should we use kqueue instead of select? Select is used by default.
#CONFIG_ELOOP_KQUEUE=y

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# Disable Linux packet socket workaround applicable for station interface
# in a bridge for EAPOL frames. This should be uncommented only if the kernel
# is known to not have the regression issue in packet socket behavior with
# bridge interfaces (commit 'bridge: respect RFC2863 operational state')').
#CONFIG_NO_LINUX_PACKET_SOCKET_WAR=y

# No management frame protection
#CONFIG_IEEE80211W=y

# No Operating Channel Validation
#CONFIG_OCV=y

# use internal crypto (avoid dependence on openssl and libtommath)
CONFIG_TLS=internal
CONFIG_INTERNAL_LIBTOMMATH=y

# No EAP so don't need TLS
#CONFIG_TLSV11=y
#CONFIG_TLSV12=y
#CONFIG_TLS_DEFAULT_CIPHERS="DEFAULT:!EXP:!LOW"
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif
#CONFIG_INTERNAL_LIBTOMMATH_FAST=y


# No NDIS
#CONFIG_NDIS_EVENTS_INTEGRATED=y
#PLATFORMSDKLIB="/opt/Program Files/Microsoft Platform SDK/Lib"

# Use new DBus control interface
CONFIG_CTRL_IFACE_DBUS_NEW=y

# Add introspection support for new DBus control interface
CONFIG_CTRL_IFACE_DBUS_INTRO=y

# No Dynamic addition of methods
#CONFIG_DYNAMIC_EAP_METHODS=y

# No IEEE Std 802.11r-2008 (Fast BSS Transition) for station mode
#CONFIG_IEEE80211R=y

# Add support for writing debug log to a file (/tmp/wpa_supplicant-log-#.txt)
CONFIG_DEBUG_FILE=y

# Send debug messages to stdout instad of syslog or kernel tracing or Android logcat
#CONFIG_DEBUG_SYSLOG=y
# Set syslog facility for debug messages
#CONFIG_DEBUG_SYSLOG_FACILITY=LOG_DAEMON
#CONFIG_DEBUG_LINUX_TRACING=y
#CONFIG_ANDROID_LOG=y

# No privilege separation
#CONFIG_PRIVSEP=y

# No TKIP MIC mitigation against attacks
#CONFIG_DELAYED_MIC_ERROR_REPORT=y

# No memory tracing
#CONFIG_WPA_TRACE=y

# No use of libbfd to get more details for developer debugging
#CONFIG_WPA_TRACE_BFD=y

#Just use dev/urandom
#CONFIG_GETRANDOM=y

# No High Throughput
#CONFIG_IEEE80211N=y
CONFIG_IEEE80211AC=y

# No experimental interAP or hotspot features
#CONFIG_WNM=y
#CONFIG_INTERWORKING=y
#CONFIG_HS20=y

# Enable interface matching in wpa_supplicant
#CONFIG_MATCH_IFACE=y

# Disable roaming in wpa_supplicant
#CONFIG_NO_ROAMING=y

# AP mode operations with wpa_supplicant
# This can be used for controlling AP mode operations with wpa_supplicant. It
# should be noted that this is mainly aimed at simple cases like
# WPA2-Personal while more complex configurations like WPA2-Enterprise with an
# external RADIUS server can be supported with hostapd.
CONFIG_AP=y

# No P2P (Wi-Fi Direct)
#CONFIG_P2P=y

# No TDLS support
#CONFIG_TDLS=y

# Enable Wi-Fi Display
CONFIG_WIFI_DISPLAY=y

# No Autoscan
#CONFIG_AUTOSCAN_EXPONENTIAL=y
#CONFIG_AUTOSCAN_PERIODIC=y

# No password test
#CONFIG_EXT_PASSWORD_TEST=y

# No Enable Fast Session Transfer (FST)
#CONFIG_FST=y
#CONFIG_FST_TEST=y

# No OS X builds. This is only for building eapol_test.
#CONFIG_OSX=y

# No Automatic Channel Selection
#CONFIG_ACS=y

# No Support Multi Band Operation
#CONFIG_MBO=y

# No Fast Initial Link Setup (FILS) (IEEE 802.11ai)
#CONFIG_FILS=y
# FILS shared key authentication with PFS
#CONFIG_FILS_SK_PFS=y

# Support RSN on IBSS networks
# This is needed to be able to use mode=1 network profile with proto=RSN and
# key_mgmt=WPA-PSK (i.e., full key management instead of WPA-None).
CONFIG_IBSS_RSN=y

# No External PMKSA cache control
#CONFIG_PMKSA_CACHE_EXTERNAL=y

# No Mesh Networking (IEEE 802.11s) (TODO: for now)
#CONFIG_MESH=y

# Background scanning modules for roaming
#CONFIG_BGSCAN_SIMPLE=y
#CONFIG_BGSCAN_LEARN=y

# No Opportunistic Wireless Encryption (OWE)
#CONFIG_OWE=y

# No Device Provisioning Protocol (DPP)
#CONFIG_DPP=y
